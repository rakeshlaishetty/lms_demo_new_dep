{"version":3,"sources":["views/app/pages/product/thumb-list.js","components/common/CustomSelectInput.js","containers/pages/Pagination.js","containers/pages/ListPageHeading.js","containers/pages/AddNewModal.js","hooks/use-mousetrap.js","containers/pages/ContextMenuContainer.js","containers/pages/DataListView.js","containers/pages/ImageListView.js","containers/pages/ThumbListView.js","containers/pages/ListPageListing.js"],"names":["getIndex","value","arr","prop","i","length","apiUrl","servicePath","orderOptions","column","label","pageSizes","categories","key","ThumbListPages","match","useState","isLoaded","setIsLoaded","displayMode","setDisplayMode","currentPage","setCurrentPage","selectedPageSize","setSelectedPageSize","selectedOrderOption","setSelectedOrderOption","modalOpen","setModalOpen","totalItemCount","setTotalItemCount","totalPage","setTotalPage","search","setSearch","selectedItems","setSelectedItems","items","setItems","lastChecked","setLastChecked","useEffect","a","axios","get","then","res","data","map","x","img","replace","totalItem","fetchData","handleChangeSelectAll","isToggle","id","document","activeElement","blur","useMousetrap","startIndex","endIndex","className","heading","changeDisplayMode","changeOrderBy","find","changePageSize","selectedItemsLength","itemsLength","onSearchKey","e","target","toLowerCase","toggleModal","onCheckItem","event","tagName","parentElement","selectedList","includes","filter","push","shiftKey","newItems","start","end","slice","Math","min","max","item","Array","from","Set","onContextMenuClick","console","log","action","onContextMenu","clickedProductId","onChangePage","CustomSelectInput","props","customProps","autoCorrect","autoCapitalize","Input","Pagination","numberLimit","lastIsActive","firstIsActive","startPoint","endPoint","parseInt","points","firstPageButtonClassName","lastPageButtonClassName","prevPageButtonClassName","nextPageButtonClassName","xxs","onClick","injectIntl","displayOptionsIsOpen","setDisplayOptionsIsOpen","color","size","isOpen","caret","order","index","right","AddNewModal","toggle","wrapClassName","backdrop","components","classNamePrefix","name","options","type","outline","handlerKey","handlerCallback","actionRef","useRef","current","mousetrap","bind","evt","combo","preventDefault","unbind","ContextMenuContainer","onShow","detail","DataListView","product","isSelect","collect","Card","classnames","active","to","title","category","Date","date","toLocaleDateString","Badge","statusColor","pill","status","React","memo","ImageListView","sm","lg","xl","CardImg","top","alt","src","CardBody","Row","CustomInput","checked","onChange","CardSubtitle","CardText","ThumbListView","ListPageListing"],"mappings":"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","file":"static/js/product-thumb-list.aa1a572a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport { servicePath } from 'constants/defaultValues';\r\n\r\nimport ListPageHeading from 'containers/pages/ListPageHeading';\r\nimport AddNewModal from 'containers/pages/AddNewModal';\r\nimport ListPageListing from 'containers/pages/ListPageListing';\r\nimport useMousetrap from 'hooks/use-mousetrap';\r\n\r\nconst getIndex = (value, arr, prop) => {\r\n  for (let i = 0; i < arr.length; i += 1) {\r\n    if (arr[i][prop] === value) {\r\n      return i;\r\n    }\r\n  }\r\n  return -1;\r\n};\r\n\r\nconst apiUrl = `${servicePath}/cakes/paging`;\r\n\r\nconst orderOptions = [\r\n  { column: 'title', label: 'Product Name' },\r\n  { column: 'category', label: 'Category' },\r\n  { column: 'status', label: 'Status' },\r\n];\r\nconst pageSizes = [4, 8, 12, 20];\r\n\r\nconst categories = [\r\n  { label: 'Cakes', value: 'Cakes', key: 0 },\r\n  { label: 'Cupcakes', value: 'Cupcakes', key: 1 },\r\n  { label: 'Desserts', value: 'Desserts', key: 2 },\r\n];\r\n\r\nconst ThumbListPages = ({ match }) => {\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [displayMode, setDisplayMode] = useState('thumblist');\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [selectedPageSize, setSelectedPageSize] = useState(8);\r\n  const [selectedOrderOption, setSelectedOrderOption] = useState({\r\n    column: 'title',\r\n    label: 'Product Name',\r\n  });\r\n\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [totalItemCount, setTotalItemCount] = useState(0);\r\n  const [totalPage, setTotalPage] = useState(1);\r\n  const [search, setSearch] = useState('');\r\n  const [selectedItems, setSelectedItems] = useState([]);\r\n  const [items, setItems] = useState([]);\r\n  const [lastChecked, setLastChecked] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setCurrentPage(1);\r\n  }, [selectedPageSize, selectedOrderOption]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      axios\r\n        .get(\r\n          `${apiUrl}?pageSize=${selectedPageSize}&currentPage=${currentPage}&orderBy=${selectedOrderOption.column}&search=${search}`\r\n        )\r\n        .then((res) => {\r\n          return res.data;\r\n        })\r\n        .then((data) => {\r\n          setTotalPage(data.totalPage);\r\n          setItems(\r\n            data.data.map((x) => {\r\n              return { ...x, img: x.img.replace('img/', 'img/products/') };\r\n            })\r\n          );\r\n          setSelectedItems([]);\r\n          setTotalItemCount(data.totalItem);\r\n          setIsLoaded(true);\r\n        });\r\n    }\r\n    fetchData();\r\n  }, [selectedPageSize, currentPage, selectedOrderOption, search]);\r\n\r\n  const onCheckItem = (event, id) => {\r\n    if (\r\n      event.target.tagName === 'A' ||\r\n      (event.target.parentElement && event.target.parentElement.tagName === 'A')\r\n    ) {\r\n      return true;\r\n    }\r\n    if (lastChecked === null) {\r\n      setLastChecked(id);\r\n    }\r\n\r\n    let selectedList = [...selectedItems];\r\n    if (selectedList.includes(id)) {\r\n      selectedList = selectedList.filter((x) => x !== id);\r\n    } else {\r\n      selectedList.push(id);\r\n    }\r\n    setSelectedItems(selectedList);\r\n\r\n    if (event.shiftKey) {\r\n      let newItems = [...items];\r\n      const start = getIndex(id, newItems, 'id');\r\n      const end = getIndex(lastChecked, newItems, 'id');\r\n      newItems = newItems.slice(Math.min(start, end), Math.max(start, end) + 1);\r\n      selectedItems.push(\r\n        ...newItems.map((item) => {\r\n          return item.id;\r\n        })\r\n      );\r\n      selectedList = Array.from(new Set(selectedItems));\r\n      setSelectedItems(selectedList);\r\n    }\r\n    document.activeElement.blur();\r\n    return false;\r\n  };\r\n\r\n  const handleChangeSelectAll = (isToggle) => {\r\n    if (selectedItems.length >= items.length) {\r\n      if (isToggle) {\r\n        setSelectedItems([]);\r\n      }\r\n    } else {\r\n      setSelectedItems(items.map((x) => x.id));\r\n    }\r\n    document.activeElement.blur();\r\n    return false;\r\n  };\r\n\r\n  const onContextMenuClick = (e, data) => {\r\n    // params : (e,data,target)\r\n    console.log('onContextMenuClick - selected items', selectedItems);\r\n    console.log('onContextMenuClick - action : ', data.action);\r\n  };\r\n\r\n  const onContextMenu = (e, data) => {\r\n    const clickedProductId = data.data;\r\n    if (!selectedItems.includes(clickedProductId)) {\r\n      setSelectedItems([clickedProductId]);\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  useMousetrap(['ctrl+a', 'command+a'], () => {\r\n    handleChangeSelectAll(false);\r\n  });\r\n\r\n  useMousetrap(['ctrl+d', 'command+d'], () => {\r\n    setSelectedItems([]);\r\n    return false;\r\n  });\r\n\r\n  const startIndex = (currentPage - 1) * selectedPageSize;\r\n  const endIndex = currentPage * selectedPageSize;\r\n\r\n  return !isLoaded ? (\r\n    <div className=\"loading\" />\r\n  ) : (\r\n    <>\r\n      <div className=\"disable-text-selection\">\r\n        <ListPageHeading\r\n          heading=\"menu.thumb-list\"\r\n          displayMode={displayMode}\r\n          changeDisplayMode={setDisplayMode}\r\n          handleChangeSelectAll={handleChangeSelectAll}\r\n          changeOrderBy={(column) => {\r\n            setSelectedOrderOption(\r\n              orderOptions.find((x) => x.column === column)\r\n            );\r\n          }}\r\n          changePageSize={setSelectedPageSize}\r\n          selectedPageSize={selectedPageSize}\r\n          totalItemCount={totalItemCount}\r\n          selectedOrderOption={selectedOrderOption}\r\n          match={match}\r\n          startIndex={startIndex}\r\n          endIndex={endIndex}\r\n          selectedItemsLength={selectedItems ? selectedItems.length : 0}\r\n          itemsLength={items ? items.length : 0}\r\n          onSearchKey={(e) => {\r\n            if (e.key === 'Enter') {\r\n              setSearch(e.target.value.toLowerCase());\r\n            }\r\n          }}\r\n          orderOptions={orderOptions}\r\n          pageSizes={pageSizes}\r\n          toggleModal={() => setModalOpen(!modalOpen)}\r\n        />\r\n        <AddNewModal\r\n          modalOpen={modalOpen}\r\n          toggleModal={() => setModalOpen(!modalOpen)}\r\n          categories={categories}\r\n        />\r\n        <ListPageListing\r\n          items={items}\r\n          displayMode={displayMode}\r\n          selectedItems={selectedItems}\r\n          onCheckItem={onCheckItem}\r\n          currentPage={currentPage}\r\n          totalPage={totalPage}\r\n          onContextMenuClick={onContextMenuClick}\r\n          onContextMenu={onContextMenu}\r\n          onChangePage={setCurrentPage}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ThumbListPages;\r\n","import React from 'react';\r\nimport { components } from 'react-select';\r\n\r\nconst CustomSelectInput = (props) => {\r\n  const customProps = { ...props };\r\n  delete customProps.autoCorrect;\r\n  delete customProps.autoCapitalize;\r\n  return <components.Input {...customProps} />;\r\n};\r\n\r\nexport default CustomSelectInput;\r\n","import React from 'react';\r\nimport { Nav, NavItem, NavLink } from 'reactstrap';\r\nimport { Colxx } from 'components/common/CustomBootstrap';\r\n\r\nconst Pagination = ({\r\n  totalPage = 0,\r\n  currentPage = 1,\r\n  numberLimit = 5,\r\n  lastIsActive = true,\r\n  firstIsActive = true,\r\n  onChangePage,\r\n}) => {\r\n  let startPoint = 1;\r\n  let endPoint = numberLimit;\r\n\r\n  if (numberLimit > totalPage) {\r\n    startPoint = 1;\r\n    endPoint = totalPage;\r\n  } else if (currentPage <= parseInt(numberLimit / 2, 10)) {\r\n    startPoint = 1;\r\n    endPoint = numberLimit;\r\n  } else if (currentPage + parseInt(numberLimit / 2, 10) <= totalPage) {\r\n    startPoint = currentPage - parseInt(numberLimit / 2, 10);\r\n    endPoint = currentPage + parseInt(numberLimit / 2, 10);\r\n  } else {\r\n    startPoint = totalPage - (numberLimit - 1);\r\n    endPoint = totalPage;\r\n  }\r\n  startPoint = startPoint === 0 ? 1 : startPoint;\r\n  const points = [];\r\n  for (let i = startPoint; i <= endPoint; i += 1) {\r\n    points.push(i);\r\n  }\r\n\r\n  const firstPageButtonClassName = currentPage <= 1 ? 'disabled' : '';\r\n  const lastPageButtonClassName = currentPage >= totalPage ? 'disabled' : '';\r\n  const prevPageButtonClassName = currentPage <= 1 ? 'disabled' : '';\r\n  const nextPageButtonClassName = currentPage >= totalPage ? 'disabled' : '';\r\n  return totalPage > 1 ? (\r\n    <Colxx xxs=\"12\" className=\"mt-3 mb-3\">\r\n      <Nav className=\"pagination justify-content-center\">\r\n        {firstIsActive && (\r\n          <NavItem className={`page-item ${firstPageButtonClassName}`}>\r\n            <NavLink\r\n              className=\"page-link first c-pointer\"\r\n              onClick={() => onChangePage(1)}\r\n            >\r\n              <i className=\"simple-icon-control-start\" />\r\n            </NavLink>\r\n          </NavItem>\r\n        )}\r\n\r\n        <NavItem className={`page-item ${prevPageButtonClassName}`}>\r\n          <NavLink\r\n            className=\"page-link prev c-pointer\"\r\n            onClick={() => onChangePage(currentPage - 1)}\r\n          >\r\n            <i className=\"simple-icon-arrow-left\" />\r\n          </NavLink>\r\n        </NavItem>\r\n        {points.map((i) => {\r\n          return (\r\n            <NavItem\r\n              key={i}\r\n              className={`page-item ${currentPage === i && 'active'}`}\r\n            >\r\n              <NavLink\r\n                className=\"page-link c-pointer\"\r\n                onClick={() => onChangePage(i)}\r\n              >\r\n                {i}\r\n              </NavLink>\r\n            </NavItem>\r\n          );\r\n        })}\r\n        <NavItem className={`page-item ${nextPageButtonClassName}`}>\r\n          <NavLink\r\n            className=\"page-link next c-pointer\"\r\n            onClick={() => onChangePage(currentPage + 1)}\r\n          >\r\n            <i className=\"simple-icon-arrow-right\" />\r\n          </NavLink>\r\n        </NavItem>\r\n        {lastIsActive && (\r\n          <NavItem className={`page-item ${lastPageButtonClassName}`}>\r\n            <NavLink\r\n              className=\"page-link last c-pointer\"\r\n              onClick={() => onChangePage(totalPage)}\r\n            >\r\n              <i className=\"simple-icon-control-end\" />\r\n            </NavLink>\r\n          </NavItem>\r\n        )}\r\n      </Nav>\r\n    </Colxx>\r\n  ) : (\r\n    <Colxx xxs=\"12\" className=\"mt-2\" />\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","/* eslint-disable react/no-array-index-key */\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Row,\r\n  Button,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Collapse,\r\n} from 'reactstrap';\r\nimport { injectIntl } from 'react-intl';\r\n\r\nimport { Colxx, Separator } from 'components/common/CustomBootstrap';\r\nimport IntlMessages from 'helpers/IntlMessages';\r\n\r\n\r\n\r\nconst ListPageHeading = ({\r\n  changeOrderBy,\r\n  changePageSize,\r\n  selectedPageSize,\r\n  totalItemCount,\r\n  selectedOrderOption,\r\n  startIndex,\r\n  endIndex,\r\n  orderOptions,\r\n  pageSizes,\r\n  toggleModal,\r\n  heading,\r\n}) => {\r\n  const [displayOptionsIsOpen, setDisplayOptionsIsOpen] = useState(false);\r\n\r\n\r\n  return (\r\n    <Row>\r\n      <Colxx xxs=\"12\">\r\n        <div className=\"mb-2\">\r\n          <h1>\r\n            <IntlMessages id={heading} />\r\n          </h1>\r\n\r\n          <div className=\"text-zero top-right-button-container\">\r\n            <Button\r\n              color=\"primary\"\r\n              size=\"lg\"\r\n              className=\"top-right-button\"\r\n              onClick={() => toggleModal()}\r\n            >\r\n              <IntlMessages id=\"pages.add-new\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mb-2\">\r\n          <Button\r\n            color=\"empty\"\r\n            className=\"pt-0 pl-0 d-inline-block d-md-none\"\r\n            onClick={() => setDisplayOptionsIsOpen(!displayOptionsIsOpen)}\r\n          >\r\n            <IntlMessages id=\"pages.display-options\" />{' '}\r\n            <i className=\"simple-icon-arrow-down align-middle\" />\r\n          </Button>\r\n          <Collapse\r\n            isOpen={displayOptionsIsOpen}\r\n            className=\"d-md-block\"\r\n            id=\"displayOptions\"\r\n          >\r\n            \r\n            <div className=\"d-block d-md-inline-block pt-1\">\r\n              <UncontrolledDropdown className=\"mr-1 float-md-left btn-group mb-1\">\r\n                <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                  <IntlMessages id=\"pages.orderby\" />\r\n                  {selectedOrderOption.label}\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                  {orderOptions.map((order, index) => {\r\n                    return (\r\n                      <DropdownItem\r\n                        key={index}\r\n                        onClick={() => changeOrderBy(order.column)}\r\n                      >\r\n                        {order.label}\r\n                      </DropdownItem>\r\n                    );\r\n                  })}\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n             \r\n            </div>\r\n            <div className=\"float-md-right pt-1\">\r\n              <span className=\"text-muted text-small mr-1\">\r\n                <IntlMessages id=\"pages.viewing\" />\r\n                {startIndex + 1}-\r\n                {totalItemCount >= endIndex ? endIndex : totalItemCount}\r\n                {` | `}\r\n                <IntlMessages id=\"pages.total\" />\r\n                {totalItemCount}\r\n              </span>\r\n              <UncontrolledDropdown className=\"d-inline-block\">\r\n                <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                  {selectedPageSize}\r\n                </DropdownToggle>\r\n                <DropdownMenu right>\r\n                  {pageSizes.map((size, index) => {\r\n                    return (\r\n                      <DropdownItem\r\n                        key={index}\r\n                        onClick={() => changePageSize(size)}\r\n                      >\r\n                        {size}\r\n                      </DropdownItem>\r\n                    );\r\n                  })}\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n            </div>\r\n          </Collapse>\r\n        </div>\r\n        <Separator className=\"mb-5\" />\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default injectIntl(ListPageHeading);\r\n","import React from 'react';\r\nimport {\r\n  CustomInput,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Input,\r\n  Label,\r\n} from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport CustomSelectInput from 'components/common/CustomSelectInput';\r\nimport IntlMessages from 'helpers/IntlMessages';\r\n\r\nconst AddNewModal = ({ modalOpen, toggleModal, categories }) => {\r\n  return (\r\n    <Modal\r\n      isOpen={modalOpen}\r\n      toggle={toggleModal}\r\n      wrapClassName=\"modal-right\"\r\n      backdrop=\"static\"\r\n    >\r\n      <ModalHeader toggle={toggleModal}>\r\n        <IntlMessages id=\"pages.add-new-modal-title\" />\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <Label>\r\n          <IntlMessages id=\"pages.product-name\" />\r\n        </Label>\r\n        <Input />\r\n        <Label className=\"mt-4\">\r\n          <IntlMessages id=\"pages.category\" />\r\n        </Label>\r\n        <Select\r\n          components={{ Input: CustomSelectInput }}\r\n          className=\"react-select\"\r\n          classNamePrefix=\"react-select\"\r\n          name=\"form-field-name\"\r\n          options={categories}\r\n        />\r\n        <Label className=\"mt-4\">\r\n          <IntlMessages id=\"pages.description\" />\r\n        </Label>\r\n        <Input type=\"textarea\" name=\"text\" id=\"exampleText\" />\r\n        <Label className=\"mt-4\">\r\n          <IntlMessages id=\"pages.status\" />\r\n        </Label>\r\n        <CustomInput\r\n          type=\"radio\"\r\n          id=\"exCustomRadio\"\r\n          name=\"customRadio\"\r\n          label=\"ON HOLD\"\r\n        />\r\n        <CustomInput\r\n          type=\"radio\"\r\n          id=\"exCustomRadio2\"\r\n          name=\"customRadio\"\r\n          label=\"PROCESSED\"\r\n        />\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button color=\"secondary\" outline onClick={toggleModal}>\r\n          <IntlMessages id=\"pages.cancel\" />\r\n        </Button>\r\n        <Button color=\"primary\" onClick={toggleModal}>\r\n          <IntlMessages id=\"pages.submit\" />\r\n        </Button>{' '}\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AddNewModal;\r\n","/* eslint-disable no-unused-expressions */\r\nimport mousetrap from 'mousetrap';\r\nimport { useEffect, useRef } from 'react';\r\n\r\n/**\r\n * Use mousetrap hook\r\n *\r\n * @param  {(string | string[])} handlerKey - A key, key combo or array of combos according to Mousetrap documentation.\r\n * @param  { function } handlerCallback - A function that is triggered on key combo catch.\r\n */\r\nexport default (handlerKey, handlerCallback) => {\r\n  const actionRef = useRef(null);\r\n  actionRef.current = handlerCallback;\r\n\r\n  useEffect(() => {\r\n    mousetrap.bind(handlerKey, (evt, combo) => {\r\n      typeof actionRef.current === 'function' && actionRef.current(evt, combo);\r\n      evt.preventDefault();\r\n    });\r\n    return () => {\r\n      mousetrap.unbind(handlerKey);\r\n    };\r\n  }, [handlerKey]);\r\n};\r\n","import React from 'react';\r\nimport { ContextMenu, MenuItem } from 'react-contextmenu';\r\n\r\nconst ContextMenuContainer = ({ onContextMenu, onContextMenuClick }) => {\r\n  return (\r\n    <ContextMenu id=\"menu_id\" onShow={(e) => onContextMenu(e, e.detail.data)}>\r\n      <MenuItem onClick={onContextMenuClick} data={{ action: 'copy' }}>\r\n        <i className=\"simple-icon-docs\" /> <span>Copy</span>\r\n      </MenuItem>\r\n      <MenuItem onClick={onContextMenuClick} data={{ action: 'move' }}>\r\n        <i className=\"simple-icon-drawer\" /> <span>Move to archive</span>\r\n      </MenuItem>\r\n      <MenuItem onClick={onContextMenuClick} data={{ action: 'delete' }}>\r\n        <i className=\"simple-icon-trash\" /> <span>Delete</span>\r\n      </MenuItem>\r\n    </ContextMenu>\r\n  );\r\n};\r\n\r\nexport default ContextMenuContainer;\r\n","import React from 'react';\r\nimport { Card, Badge } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classnames from 'classnames';\r\nimport { ContextMenuTrigger } from 'react-contextmenu';\r\nimport { Colxx } from 'components/common/CustomBootstrap';\r\n\r\nconst DataListView = ({ product, isSelect, collect, onCheckItem }) => {\r\n  return (\r\n    <Colxx xxs=\"12\" className=\"mb-3\">\r\n      <ContextMenuTrigger id=\"menu_id\" data={product.id} collect={collect}>\r\n        <Card\r\n          onClick={(event) => onCheckItem(event, product.id)}\r\n          className={classnames('d-flex flex-row', {\r\n            active: isSelect,\r\n          })}\r\n        >\r\n          <div className=\"pl-2 d-flex flex-grow-1 min-width-zero\">\r\n            <div className=\"card-body align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero align-items-lg-center\">\r\n              <NavLink to={`?p=${product.id}`} className=\"w-40 w-sm-100\">\r\n                <p className=\"list-item-heading mb-1 truncate\">\r\n                  {product.title}\r\n                </p>\r\n              </NavLink>\r\n              <p className=\"mb-1 text-muted text-small w-15 w-sm-100\">\r\n                {product.category}\r\n              </p>\r\n              <p className=\"mb-1 text-muted text-small w-15 w-sm-100\">\r\n                {(new Date(product.date)).toLocaleDateString()}\r\n              </p>\r\n              <div className=\"w-15 w-sm-100\">\r\n                <Badge color={product.statusColor} pill>\r\n                  {product.status}\r\n                </Badge>\r\n              </div>\r\n            </div>\r\n            <div className=\"custom-control custom-checkbox pl-1 align-self-center pr-4\">\r\n              Delete\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </ContextMenuTrigger>\r\n    </Colxx>\r\n  );\r\n};\r\n\r\n/* React.memo detail : https://reactjs.org/docs/react-api.html#reactpurecomponent  */\r\nexport default React.memo(DataListView);\r\n","import React from 'react';\r\nimport {\r\n  Row,\r\n  Card,\r\n  CardBody,\r\n  CardSubtitle,\r\n  CardImg,\r\n  CardText,\r\n  CustomInput,\r\n  Badge,\r\n} from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classnames from 'classnames';\r\nimport { ContextMenuTrigger } from 'react-contextmenu';\r\nimport { Colxx } from 'components/common/CustomBootstrap';\r\n\r\nconst ImageListView = ({ product, isSelect, collect, onCheckItem }) => {\r\n  return (\r\n    <Colxx sm=\"6\" lg=\"4\" xl=\"3\" className=\"mb-3\" key={product.id}>\r\n      <ContextMenuTrigger id=\"menu_id\" data={product.id} collect={collect}>\r\n        <Card\r\n          onClick={(event) => onCheckItem(event, product.id)}\r\n          className={classnames({\r\n            active: isSelect,\r\n          })}\r\n        >\r\n          <div className=\"position-relative\">\r\n            <NavLink to={`?p=${product.id}`} className=\"w-40 w-sm-100\">\r\n              <CardImg top alt={product.title} src={product.img} />\r\n            </NavLink>\r\n            <Badge\r\n              color={product.statusColor}\r\n              pill\r\n              className=\"position-absolute badge-top-left\"\r\n            >\r\n              {product.status}\r\n            </Badge>\r\n          </div>\r\n          <CardBody>\r\n            <Row>\r\n              <Colxx xxs=\"2\">\r\n                <CustomInput\r\n                  className=\"item-check mb-0\"\r\n                  type=\"checkbox\"\r\n                  id={`check_${product.id}`}\r\n                  checked={isSelect}\r\n                  onChange={() => {}}\r\n                  label=\"\"\r\n                />\r\n              </Colxx>\r\n              <Colxx xxs=\"10\" className=\"mb-3\">\r\n                <CardSubtitle>{product.title}</CardSubtitle>\r\n                <CardText className=\"text-muted text-small mb-0 font-weight-light\">\r\n                  {product.date}\r\n                </CardText>\r\n              </Colxx>\r\n            </Row>\r\n          </CardBody>\r\n        </Card>\r\n      </ContextMenuTrigger>\r\n    </Colxx>\r\n  );\r\n};\r\n\r\n/* React.memo detail : https://reactjs.org/docs/react-api.html#reactpurecomponent  */\r\nexport default React.memo(ImageListView);\r\n","import React from 'react';\r\nimport { Card, CustomInput, Badge } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classnames from 'classnames';\r\nimport { ContextMenuTrigger } from 'react-contextmenu';\r\nimport { Colxx } from 'components/common/CustomBootstrap';\r\n\r\nconst ThumbListView = ({ product, isSelect, collect, onCheckItem }) => {\r\n  return (\r\n    <Colxx xxs=\"12\" key={product.id} className=\"mb-3\">\r\n      <ContextMenuTrigger id=\"menu_id\" data={product.id} collect={collect}>\r\n        <Card\r\n          onClick={(event) => onCheckItem(event, product.id)}\r\n          className={classnames('d-flex flex-row', {\r\n            active: isSelect,\r\n          })}\r\n        >\r\n          <NavLink to={`?p=${product.id}`} className=\"d-flex\">\r\n            <img\r\n              alt={product.title}\r\n              src={product.img}\r\n              className=\"list-thumbnail responsive border-0 card-img-left\"\r\n            />\r\n          </NavLink>\r\n          <div className=\"pl-2 d-flex flex-grow-1 min-width-zero\">\r\n            <div className=\"card-body align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero align-items-lg-center\">\r\n              <NavLink to={`?p=${product.id}`} className=\"w-40 w-sm-100\">\r\n                <p className=\"list-item-heading mb-1 truncate\">\r\n                  {product.title}\r\n                </p>\r\n              </NavLink>\r\n              <p className=\"mb-1 text-muted text-small w-15 w-sm-100\">\r\n                {product.category}\r\n              </p>\r\n              <p className=\"mb-1 text-muted text-small w-15 w-sm-100\">\r\n                {product.date}\r\n              </p>\r\n              <div className=\"w-15 w-sm-100\">\r\n                <Badge color={product.statusColor} pill>\r\n                  {product.status}\r\n                </Badge>\r\n              </div>\r\n            </div>\r\n            <div className=\"custom-control custom-checkbox pl-1 align-self-center pr-4\">\r\n              <CustomInput\r\n                className=\"item-check mb-0\"\r\n                type=\"checkbox\"\r\n                id={`check_${product.id}`}\r\n                checked={isSelect}\r\n                onChange={() => {}}\r\n                label=\"\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </ContextMenuTrigger>\r\n    </Colxx>\r\n  );\r\n};\r\n\r\n/* React.memo detail : https://reactjs.org/docs/react-api.html#reactpurecomponent  */\r\nexport default React.memo(ThumbListView);\r\n","import React from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport Pagination from './Pagination';\r\nimport ContextMenuContainer from './ContextMenuContainer';\r\nimport DataListView from './DataListView';\r\nimport ImageListView from './ImageListView';\r\nimport ThumbListView from './ThumbListView';\r\n\r\nfunction collect(props) {\r\n  return { data: props.data };\r\n}\r\n\r\nconst ListPageListing = ({\r\n  items,\r\n  displayMode,\r\n  selectedItems,\r\n  onCheckItem,\r\n  currentPage,\r\n  totalPage,\r\n  onContextMenuClick,\r\n  onContextMenu,\r\n  onChangePage,\r\n}) => {\r\n  return (\r\n    <Row>\r\n      {items.map((product) => {\r\n        if (displayMode === 'imagelist') {\r\n          return (\r\n            <ImageListView\r\n              key={product.id}\r\n              product={product}\r\n              isSelect={selectedItems.includes(product.id)}\r\n              collect={collect}\r\n              onCheckItem={onCheckItem}\r\n            />\r\n          );\r\n        }\r\n        if (displayMode === 'thumblist') {\r\n          return (\r\n            <ThumbListView\r\n              key={product.id}\r\n              product={product}\r\n              isSelect={selectedItems.includes(product.id)}\r\n              collect={collect}\r\n              onCheckItem={onCheckItem}\r\n            />\r\n          );\r\n        }\r\n        return (\r\n          <DataListView\r\n            key={product.id}\r\n            product={product}\r\n            isSelect={selectedItems.includes(product.id)}\r\n            onCheckItem={onCheckItem}\r\n            collect={collect}\r\n          />\r\n        );\r\n      })}\r\n      <Pagination\r\n        currentPage={currentPage}\r\n        totalPage={totalPage}\r\n        onChangePage={(i) => onChangePage(i)}\r\n      />\r\n      <ContextMenuContainer\r\n        onContextMenuClick={onContextMenuClick}\r\n        onContextMenu={onContextMenu}\r\n      />\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default React.memo(ListPageListing);\r\n"],"sourceRoot":""}